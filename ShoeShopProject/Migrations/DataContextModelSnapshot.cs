// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShoeShop.Data;

#nullable disable

namespace ShoeShop.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ShoeShop.Models.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Blog_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<int>("Author")
                        .HasColumnType("int");

                    b.Property<string>("Brief")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("Category_Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_Date");

                    b.Property<string>("Desciption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFearture")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_Date");

                    b.HasKey("BlogId");

                    b.HasIndex("Author");

                    b.HasIndex("CategoryId");

                    b.ToTable("Blog", (string)null);
                });

            modelBuilder.Entity("ShoeShop.Models.BlogCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Category_Name");

                    b.HasKey("Id");

                    b.ToTable("Blog_Category", (string)null);
                });

            modelBuilder.Entity("ShoeShop.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Brand_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Brand_Name");

                    b.HasKey("BrandId");

                    b.ToTable("Brand", (string)null);
                });

            modelBuilder.Entity("ShoeShop.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Cart_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date")
                        .HasColumnName("Create_Date");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("CartId");

                    b.HasIndex("UserId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("ShoeShop.Models.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CartItem_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemId"));

                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("Cart_Id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ShoeVariantId")
                        .HasColumnType("int")
                        .HasColumnName("ShoeVariant_Id");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("ShoeVariantId");

                    b.ToTable("CartItem", (string)null);
                });

            modelBuilder.Entity("ShoeShop.Models.Color", b =>
                {
                    b.Property<int>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Color_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ColorId"));

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Color_Name");

                    b.HasKey("ColorId");

                    b.ToTable("Color", (string)null);
                });

            modelBuilder.Entity("ShoeShop.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FeedbackContent")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Feedback_Content");

                    b.Property<int>("RatedStar")
                        .HasColumnType("int")
                        .HasColumnName("Rated_Star");

                    b.Property<int>("ShoeId")
                        .HasColumnType("int")
                        .HasColumnName("Shoe_Id");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Update_Date");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ShoeId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("ShoeShop.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Order_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("OrderAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Order_Address");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("date")
                        .HasColumnName("Order_Date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("date")
                        .HasColumnName("Update_Date");

                    b.Property<int>("UpdateUser")
                        .HasColumnType("int")
                        .HasColumnName("Update_User");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("ShoeShop.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderItem_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("Order_Id");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ShoeVariantId")
                        .HasColumnType("int")
                        .HasColumnName("ShoeVariant_Id");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ShoeVariantId");

                    b.ToTable("Order_Item", (string)null);
                });

            modelBuilder.Entity("ShoeShop.Models.OrderSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("Order_Id");

                    b.Property<int>("Sales")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("Sales");

                    b.ToTable("Order_Sale", (string)null);
                });

            modelBuilder.Entity("ShoeShop.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"));

                    b.Property<string>("Permisson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("Permission", (string)null);
                });

            modelBuilder.Entity("ShoeShop.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Role_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Role_Name");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("ShoeShop.Models.Settting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desciption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SettingCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("Setting_Code")
                        .IsFixedLength();

                    b.Property<string>("SettingName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Setting_Name");

                    b.Property<string>("SettingType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("Setting_Type")
                        .IsFixedLength();

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdateUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Settting", (string)null);
                });

            modelBuilder.Entity("ShoeShop.Models.Shoe", b =>
                {
                    b.Property<int>("ShoeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Shoe_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShoeId"));

                    b.Property<int>("AverageRating")
                        .HasColumnType("int")
                        .HasColumnName("average_rating");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<bool?>("IsFeature")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 0)");

                    b.Property<int>("ShoeLineId")
                        .HasColumnType("int")
                        .HasColumnName("ShoeLine_Id");

                    b.Property<string>("ShoeName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Shoe_Name");

                    b.Property<string>("ThumbnailPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Thumbnail_Path");

                    b.HasKey("ShoeId");

                    b.HasIndex("ShoeLineId");

                    b.ToTable("Shoe", (string)null);
                });

            modelBuilder.Entity("ShoeShop.Models.ShoeImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShoeId")
                        .HasColumnType("int")
                        .HasColumnName("Shoe_Id");

                    b.HasKey("Id");

                    b.HasIndex("ShoeId");

                    b.ToTable("Shoe_Image", (string)null);
                });

            modelBuilder.Entity("ShoeShop.Models.ShoeLine", b =>
                {
                    b.Property<int>("ShoeLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShoeLine_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShoeLineId"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("Brand_Id");

                    b.Property<string>("ShoeLineName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ShoeLine_Name");

                    b.HasKey("ShoeLineId");

                    b.HasIndex("BrandId");

                    b.ToTable("Shoe_Line", (string)null);
                });

            modelBuilder.Entity("ShoeShop.Models.ShoeVariant", b =>
                {
                    b.Property<int>("ShoeVariantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShoeVariant_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShoeVariantId"));

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("Color_Id");

                    b.Property<int>("ShoeId")
                        .HasColumnType("int")
                        .HasColumnName("Shoe_Id");

                    b.Property<int>("SizeId")
                        .HasColumnType("int")
                        .HasColumnName("Size_Id");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("ShoeVariantId");

                    b.HasIndex("ColorId");

                    b.HasIndex("ShoeId");

                    b.HasIndex("SizeId");

                    b.ToTable("Shoe_Variant", (string)null);
                });

            modelBuilder.Entity("ShoeShop.Models.Size", b =>
                {
                    b.Property<int>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Size_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SizeId"));

                    b.Property<float>("SizeValue")
                        .HasColumnType("real")
                        .HasColumnName("Size_Value");

                    b.HasKey("SizeId");

                    b.ToTable("Size", (string)null);
                });

            modelBuilder.Entity("ShoeShop.Models.Slider", b =>
                {
                    b.Property<int>("SliderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Slider_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SliderId"));

                    b.Property<string>("Backlink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("SliderId");

                    b.ToTable("Slider", (string)null);
                });

            modelBuilder.Entity("ShoeShop.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Create_Date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("Role_Id");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Update_Date");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("User_Name");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("ShoeShop.Models.Blog", b =>
                {
                    b.HasOne("ShoeShop.Models.User", "AuthorNavigation")
                        .WithMany("Blogs")
                        .HasForeignKey("Author")
                        .IsRequired()
                        .HasConstraintName("FK_Blog_User1");

                    b.HasOne("ShoeShop.Models.BlogCategory", "Category")
                        .WithMany("Blogs")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Blog_Blog_Category");

                    b.Navigation("AuthorNavigation");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ShoeShop.Models.Cart", b =>
                {
                    b.HasOne("ShoeShop.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Cart_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShoeShop.Models.CartItem", b =>
                {
                    b.HasOne("ShoeShop.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .IsRequired()
                        .HasConstraintName("FK_CartItem_Cart");

                    b.HasOne("ShoeShop.Models.ShoeVariant", "ShoeVariant")
                        .WithMany("CartItems")
                        .HasForeignKey("ShoeVariantId")
                        .IsRequired()
                        .HasConstraintName("FK_CartItem_Shoe_Variant");

                    b.Navigation("Cart");

                    b.Navigation("ShoeVariant");
                });

            modelBuilder.Entity("ShoeShop.Models.Feedback", b =>
                {
                    b.HasOne("ShoeShop.Models.Shoe", "Shoe")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ShoeId")
                        .IsRequired()
                        .HasConstraintName("FK_Feedback_Shoe");

                    b.HasOne("ShoeShop.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Feedback_User");

                    b.Navigation("Shoe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShoeShop.Models.Order", b =>
                {
                    b.HasOne("ShoeShop.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShoeShop.Models.OrderItem", b =>
                {
                    b.HasOne("ShoeShop.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Item_Order");

                    b.HasOne("ShoeShop.Models.ShoeVariant", "ShoeVariant")
                        .WithMany("OrderItems")
                        .HasForeignKey("ShoeVariantId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Item_Shoe_Variant");

                    b.Navigation("Order");

                    b.Navigation("ShoeVariant");
                });

            modelBuilder.Entity("ShoeShop.Models.OrderSale", b =>
                {
                    b.HasOne("ShoeShop.Models.Order", "Order")
                        .WithMany("OrderSales")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Sale_Order");

                    b.HasOne("ShoeShop.Models.User", "SalesNavigation")
                        .WithMany("OrderSales")
                        .HasForeignKey("Sales")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Sale_User");

                    b.Navigation("Order");

                    b.Navigation("SalesNavigation");
                });

            modelBuilder.Entity("ShoeShop.Models.Permission", b =>
                {
                    b.HasOne("ShoeShop.Models.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Permission_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ShoeShop.Models.Shoe", b =>
                {
                    b.HasOne("ShoeShop.Models.ShoeLine", "ShoeLine")
                        .WithMany("Shoes")
                        .HasForeignKey("ShoeLineId")
                        .IsRequired()
                        .HasConstraintName("FK_Shoe_Shoe_Line");

                    b.Navigation("ShoeLine");
                });

            modelBuilder.Entity("ShoeShop.Models.ShoeImage", b =>
                {
                    b.HasOne("ShoeShop.Models.Shoe", "Shoe")
                        .WithMany("ShoeImages")
                        .HasForeignKey("ShoeId")
                        .IsRequired()
                        .HasConstraintName("FK_Shoe_Image_Shoe");

                    b.Navigation("Shoe");
                });

            modelBuilder.Entity("ShoeShop.Models.ShoeLine", b =>
                {
                    b.HasOne("ShoeShop.Models.Brand", "Brand")
                        .WithMany("ShoeLines")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("FK_Shoe_Line_Brand");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("ShoeShop.Models.ShoeVariant", b =>
                {
                    b.HasOne("ShoeShop.Models.Color", "Color")
                        .WithMany("ShoeVariants")
                        .HasForeignKey("ColorId")
                        .IsRequired()
                        .HasConstraintName("FK_Shoe_Variant_Color");

                    b.HasOne("ShoeShop.Models.Shoe", "Shoe")
                        .WithMany("ShoeVariants")
                        .HasForeignKey("ShoeId")
                        .IsRequired()
                        .HasConstraintName("FK_Shoe_Variant_Shoe");

                    b.HasOne("ShoeShop.Models.Size", "Size")
                        .WithMany("ShoeVariants")
                        .HasForeignKey("SizeId")
                        .IsRequired()
                        .HasConstraintName("FK_Shoe_Variant_Size");

                    b.Navigation("Color");

                    b.Navigation("Shoe");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("ShoeShop.Models.User", b =>
                {
                    b.HasOne("ShoeShop.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ShoeShop.Models.BlogCategory", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("ShoeShop.Models.Brand", b =>
                {
                    b.Navigation("ShoeLines");
                });

            modelBuilder.Entity("ShoeShop.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ShoeShop.Models.Color", b =>
                {
                    b.Navigation("ShoeVariants");
                });

            modelBuilder.Entity("ShoeShop.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("OrderSales");
                });

            modelBuilder.Entity("ShoeShop.Models.Role", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ShoeShop.Models.Shoe", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("ShoeImages");

                    b.Navigation("ShoeVariants");
                });

            modelBuilder.Entity("ShoeShop.Models.ShoeLine", b =>
                {
                    b.Navigation("Shoes");
                });

            modelBuilder.Entity("ShoeShop.Models.ShoeVariant", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ShoeShop.Models.Size", b =>
                {
                    b.Navigation("ShoeVariants");
                });

            modelBuilder.Entity("ShoeShop.Models.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Carts");

                    b.Navigation("Feedbacks");

                    b.Navigation("OrderSales");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
